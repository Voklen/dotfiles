[background]
# Full path to image or directory of images
# image = /usr/share/wayfire/wallpaper.jpg
# Whether to scale images or preserve background ratio
preserve_aspect = 0
# In the case of directory, timeout between changing backgrounds, in seconds
cycle_timeout = 150
# In the case of directory, whether or not to randomize images
randomize = 0



[panel]
# widgets_* is a space-separated list of widgets to be displayed
# at the corresponding part of the panel
# Supported widgets are: launchers clock network battery window-list volume menu notifications tray command-output
# A special widgets is spacing widgets, it can be used to add padding everywhere on the panel
# To use it, just append the amount of pixels you want as a padding
# to the word "spacing" and use it as a plugin
widgets_left = command-output 
widgets_center = window-list
widgets_right = tray battery clock

# The minimal size of the panel. Note that some widgets might force panel bigger than this size.
# All widgets also have individual settings for size
# Changing this requires a panel restart
minimal_height = 24

# automatically hide when pointer isn't over the panel
autohide = false

# time in milliseconds to wait before hiding
autohide_duration = 300

# layer can be top, bottom, overlay or background
layer = top

# where to position panel
# Possible values are only "top" and "bottom"
position = bottom

# set the background color.
# background_color = gtk_headerbar # match the color of a GtkHeaderbar
# background_color = $111111 # Hex color, for example $FFFFFF for white
background_color = 0.033 0.041 0.047 0.9 # RGBA color, 1.0 0.0 0.0 0.5 for semi-transparent red

# spacing between widgets, can be negative
launchers_spacing = 4

# size of the launcher icon
launchers_size = 42


# Configuration for the clock widget
# clock format, uses the Glib Time formatting
clock_format = %e %a %H:%M
# clock font
clock_font = DejaVu Sans:style=Book 12


# Configuration for the tray widget
# Amount of smooth scrolling needed to trigger one scroll wheel step
tray_smooth_scrolling_threshold = 5

# The icon size to use for tray icons
tray_icon_size = 32

# Enable showing of the tray menu when using middle-click, otherwise, right-click is used
tray_menu_on_middle_click = false

# Configuration for the command output widget, there may be multiple commands.
# The command output widget is used to display the output of a shell command, which can be periodically refreshed.
# For example, showing the current CPU temperature by parsing `sensors` output (command may need adjustment for your particular sensor name!)

# Maximum amount of characters to show in the panel, if the command's output is too long
commands_output_max_chars = 12

# A list of commands + attributes, multiple commands can be declared after one another. The commands are numbered 1, 2, 3, etc.

# The command to be run, uncomment and adapt according to the output of sensors on your system
command_output_1 = sensors | grep Tctl | cut -d '+' -f 2 | cut -d ' ' -f 1 | sed 's/^/CPU: /g'
command_output_2 = sensors | grep edge | cut -d '+' -f 2 | cut -d ' ' -f 1 | sed 's/^/GPU: /g'

# A command which is run and whose output is displayed in a tooltip when hovering the widget
command_output_tooltip_1 = sensors
command_output_tooltip_2 = sensors

# Refresh the output of the command ever 1s. Can be set to -1 for manual updates with the mouse, or 0 for a single update at startup.
command_output_period_1 = 5
command_output_period_2 = 5

# Optionally, an icon can be displayed next to the text. Leave empty (first option) for no icon.
command_output_icon_1 = 
command_output_icon_2 = 
# command_output_icon_1 = text-x-script

# Position and size for the icon, if it is not empty
#command_output_icon_size_1 = 32
#command_output_icon_position_1 = left # or right, top, bottom
